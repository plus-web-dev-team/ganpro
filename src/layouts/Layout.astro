---
interface Props {
	title: string;
}
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import Loading from "../components/Loading.astro";
const { title } = Astro.props;
---

<!doctype html>
<html lang="ja">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link
			href="https://fonts.googleapis.com/css2?family=M+PLUS+Rounded+1c:wght@100;300;400;500;700;800;900&display=swap"
			rel="stylesheet"
		/>
		<link
			rel="stylesheet"
			href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css"
		/>
	</head>
	<body>
		<Loading />
		<Header />
		<slot />
		<Footer />
	</body>
</html>
<style lang="scss" is:global>
	/* box-sizing: border-box;を設定 */
	*,
	*::before,
	*::after {
		box-sizing: border-box;
	}

	/* フォントサイズの拡大を防ぐ */
	html {
		-moz-text-size-adjust: none;
		-webkit-text-size-adjust: none;
		text-size-adjust: none;
		font-family: "M PLUS Rounded 1c", sans-serif;
		font-weight: 300;
		color: var(--font-color);
	}

	/* デフォルトのマージンを削除、作成するCSSの制御を改善するため */
	body,
	h1,
	h2,
	h3,
	h4,
	p,
	figure,
	blockquote,
	dl,
	dd {
		margin: 0;
	}

	/* リストのスタイルを削除、これはデフォルトのスタイルが削除されることを示唆します */
	ul[role="list"],
	ol[role="list"] {
		list-style: none;
	}

	/* bodyのデフォルトを設定 */
	body {
		min-height: 100vh;
		line-height: 1.5;
	}

	/* 見出しやインタラクティブ要素のline-heightを設定 */
	/* h1,
	h2,
	h3,
	h4,
	button,
	input,
	label {
		line-height: 1.1;
	} */

	/* 見出しのテキスト折り返しをbalanceに設定 */
	h1,
	h2,
	h3,
	h4 {
		text-wrap: balance;
	}

	/* classを持たないa要素はデフォルトのスタイルを継承 */
	a:not([class]) {
		text-decoration-skip-ink: auto;
		color: currentColor;
	}

	/* 画像の扱いを簡単にする */
	img,
	picture {
		max-width: 100%;
		display: block;
	}

	/* inputやbuttonなどのfontは継承 */
	input,
	button,
	textarea,
	select {
		font: inherit;
	}

	/* rows属性のないtextareasが小さくならないようにする */
	textarea:not([rows]) {
		min-height: 10em;
	}

	/* アンカーされている要素には余分なスクロールマージンが必要 */
	:target {
		scroll-margin-block: 5ex;
	}

	/* 色の定義 */
	:root {
		--primary-color: #ede4d2;
		--secondary-color: #ed8ea0;
		--font-color: #574b46;
	}

	.bg-primary {
		background-color: var(--primary-color);
	}

	.repaet-image {
		background-image: url(/images/repeat-image.svg);
		background-position: 0 0;
		background-size: contain;
		background-repeat: round;
		@media (max-width: 375px) {
			background-image: none;
		}
	}
</style>
<script
	is:inline
	src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>
<script is:inline>
	// パンくずリスト
	const pageTitle = document.title;
	const titleParts = pageTitle.split("|");
	let rightPart = pageTitle;

	if (titleParts.length > 1) {
		rightPart = titleParts[1].trim();
	}

	const currentPageElement = document.getElementById("currentPage");

	if (currentPageElement) {
		currentPageElement.textContent = rightPart;
	}
</script>
<script is:inline>
	// カルーセル
	const initializeSwiper = true;

	if (initializeSwiper) {
		document.addEventListener("DOMContentLoaded", function () {
			const swiper = new Swiper(".swiper", {
				loop: true,
				speed: 1500,
				slidesPerView: 1.5,
				spaceBetween: 30,
				centeredSlides: true,
				autoplay: {
					delay: 1000,
					disableOnInteraction: false,
				},
				navigation: {
					nextEl: ".swiper-button-next",
					prevEl: ".swiper-button-prev",
				},
			});
		});
	}

	document.addEventListener("DOMContentLoaded", function () {
		const navButton = document.querySelector(".nav-button");
		const navWrap = document.querySelector(".nav-wrap");

		navButton.addEventListener("click", function (e) {
			e.preventDefault(); // クリック時のデフォルト動作をキャンセル

			if (navButton.classList.contains("active")) {
				navButton.classList.remove("active");
				navWrap.classList.add("close");
				navWrap.classList.remove("open");
			} else {
				navButton.classList.add("active");
				navWrap.classList.add("open");
				navWrap.classList.remove("close");
			}
		});
	});
</script>
<script is:inline>
	const loading = document.querySelector(".is-loading");
	window.addEventListener("load", () => {
		loading.classList.add("is-loaded");
	});
</script>
